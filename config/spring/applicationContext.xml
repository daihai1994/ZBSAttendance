<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
   
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
               
               http://www.springframework.org/schema/mvc
       		   http://www.springframework.org/schema/mvc/spring-mvc.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-4.3.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
               ">
	<!-- 可以扫描controller、service、...这里让扫描controller，指定controller的包-->
	<context:component-scan base-package="net.zhongbenshuo.attendance">
	</context:component-scan>
	<!-- <context:component-scan base-package="websocket"/>	 -->
	<!-- 静态资源解析包括 ：js、css、img、..-->
	<mvc:resources mapping="/img/**" location="/img/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/html/**" location="/html/" />
	<mvc:resources mapping="/media-phone/**" location="/media-phone/"/>

	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置mvc:annotation-driven默认加载很多的参数绑定方法，
	比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven -->
	<!-- <mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven> -->

	
	<mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
              <constructor-arg value="UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
	<!--拦截判断是否session过期  -->
	<mvc:interceptors>
	    <mvc:interceptor>
	        <mvc:mapping path="/**"/>
	        <mvc:exclude-mapping path="/LoginController/login.do"/>    
	        <mvc:exclude-mapping path="/LoginController/logout.do"/>    
	        <mvc:exclude-mapping path="/user/*"/> 
	        <mvc:exclude-mapping path="/WeChatController/*"/>  
	        <mvc:exclude-mapping path="*.jsp"/>
	        <mvc:exclude-mapping path="*.html"/>
	        <mvc:exclude-mapping path="*.js"/>
	        <mvc:exclude-mapping path="*.css"/>
	        <bean class="net.zhongbenshuo.attendance.utils.OnlineUserListener"></bean>
	    </mvc:interceptor>
	</mvc:interceptors>
	<bean id="handlerExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" >  
	    <property name="exceptionMappings">  
	        <props>  
	            <prop key="net.zhongbenshuo.attendance.utils.OnlineUserListener">redirect:/login.jsp</prop>  
	        </props>  
	    </property>  
	</bean>

	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">  
		<property name="messageConverters">  
	        <list>  
	               <ref bean="mappingJacksonHttpMessageConverter" />  
	        </list>  
	    </property>  
	</bean> 
	<bean id="mappingJacksonHttpMessageConverter"  
	    class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
	     <property name = "supportedMediaTypes">  
			  <list>  
			    <bean class="org.springframework.http.MediaType">  
			     <constructor-arg index="0" value="text"/>  
			     <constructor-arg index="1" value="plain"/>  
			     <constructor-arg index="2" value="UTF-8"/>  
			    </bean>  
			    <bean class="org.springframework.http.MediaType">  
			     <constructor-arg index="0" value="*"/>  
			     <constructor-arg index="1" value="*"/>  
			     <constructor-arg index="2" value="UTF-8"/>  
			    </bean>  
			    <bean class="org.springframework.http.MediaType">  
			     <constructor-arg index="0" value="text"/>  
			     <constructor-arg index="1" value="*"/>  
			     <constructor-arg index="2" value="UTF-8"/>  
			    </bean>  
			     <bean class="org.springframework.http.MediaType">  
			     <constructor-arg index="0" value="application"/>  
			     <constructor-arg index="1" value="json"/>  
			     <constructor-arg index="2" value="UTF-8"/>  
			    </bean>  
			  </list>  
		</property>  
	</bean>   
	
	<!-- 视图解析器解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp"/>
		
		<!-- 可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑-->
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.InternalResourceView</value>
		</property>
		<property name="order" value="1" />
	</bean>
	
	<!-- 自定义参数绑定 -->
<!--  	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">  -->
		<!-- 转换器 -->
<!-- 		<property name="converters">  -->
<!--  			<list>  -->
				<!-- 日期类型转换 -->
<!--  				<bean class="cn.metter.ssm.controller.converter.CustomDateConverter"/>  -->
<!--  			</list>  -->
<!--  		</property>  -->
<!--  	</bean>  -->
	

<!-- 校验错误信息配置文件 -->
<!--  	<bean id="messageSource" 
 		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"> 
		资源文件名
 		<property name="basenames">    
        	 <list>     
             <value>classpath:CustomValidationMessages</value>  
        	 </list>    
     	</property> 
		资源文件编码格式
 		<property name="fileEncodings" value="utf-8" /> 
		对资源文件内容缓存时间，单位秒
 		<property name="cacheSeconds" value="120" /> 
 	</bean>  -->
	
		<!-- 校验器 -->
<!--  	<bean id="validator" 
 		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"> 
		hibernate校验器
 		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" /> 
		指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties
 		<property name="validationMessageSource" ref="messageSource" /> 
 	</bean>  -->


	<!-- 全局异常处理器
	只要实现HandlerExceptionResolver接口就是全局异常处理器
	 -->
	<!-- <bean class="cn.metter.exception.CustomExceptionResolver"></bean>  -->
	
	
	<!-- 文件上传 -->
<!--   	<bean id="multipartResolver"  
  		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
		设置上传文件的最大尺寸为5MB
  		<property name="maxUploadSize">  
  			<value>5242880</value>  
  		</property>  
  	</bean>   -->
	<!--  上传文件定义大小 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="50048000000" />	
	</bean>	
   
	<!--拦截器 -->
		<!-- 多个拦截器,顺序执行 -->
		<!-- 登陆认证拦截器 -->
	<!-- <mvc:interceptors>
	
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/**/payapi/**" />
			<mvc:exclude-mapping path="/**/wechatserver/**" />
			<bean class="cn.metter.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>

		<mvc:interceptor>
			<mvc:mapping path="/**/payapi/**" />
			<mvc:mapping path="/**/wechatserver/**" /> 这里注释 微信接口 IP地址不拦截
			<bean class="cn.metter.payserver.interceptor.ExecuteBusinessHandler" />
		</mvc:interceptor>
	</mvc:interceptors> -->
	

	
</beans>
